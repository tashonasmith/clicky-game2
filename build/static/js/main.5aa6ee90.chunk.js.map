{"version":3,"sources":["components/Images/ImageCard.module.css","components/Wrapper/Wrapper.module.css","components/Header/Header.module.css","components/Directions/Directions.module.css","components/Container/Container.module.css","components/Wrapper/Wrapper.js","components/Header/Header.js","components/Directions/Directions.js","components/Images/ImageCard.js","components/Message/Message.js","components/Container/Container.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Wrapper","props","className","styles","wrapper","children","Header","header","score","topScore","Directions","directions","ImageCard","card","value","id","onClick","handleClick","photo","style","backgroundImage","image","Message","rightWrong","Container","container","shuffleImages","array","i","length","j","Math","floor","random","App","state","images","curScore","clicked","indexOf","handleIncrement","setState","concat","handleReset","newScore","handleShuffle","shuffledImages","this","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5aa6ee90.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"photo\":\"ImageCard_photo__1mb65\",\"card\":\"ImageCard_card__244EK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Wrapper_wrapper__acrmz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1VCKf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"directions\":\"Directions_directions__2VtJY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__3RIox\"};","import React from \"react\"\nimport styles from \"./Wrapper.module.css\"\n\n\nconst Wrapper = props => <div className={styles.wrapper}>{props.children}</div>;\n\nexport default Wrapper;\n\n\n","import React from 'react';\nimport styles from \"./Header.module.css\"\n\nconst Header = props => (\n    <div className={styles.header}>\n        <h1>\n            Clicky Game - Mean Girls Edition!\n        </h1>\n        <div className=\"scores\">\n            <ul>\n              <div className=\"current-score\">\n                Current Score: {props.score}\n              </div>\n              <div className=\"current-score\">\n                Top Score: {props.topScore}\n              </div>\n            </ul>\n        </div>\n    </div>\n);\n\nexport default Header\n\n","import React from \"react\";\nimport styles from \"./Directions.module.css\"\n\nconst Directions = () => {\n    return (\n        <section className={styles.directions}>\n            <h2>\n                Click on an image to earn points, but don't click on any more than once!\n            </h2>\n        </section>\n    )\n}\n\nexport default Directions;","import React from \"react\";\nimport styles from \"./ImageCard.module.css\";\n\nconst ImageCard = (props) => (\n  <div\n    className={styles.card}\n    value={props.id}\n    onClick={() => props.handleClick(props.id)}>\n    <div\n      className={styles.photo}\n      style={{ backgroundImage: `url('${props.image}')` }}></div>\n  </div>\n);\n\nexport default ImageCard\n\n","import React from 'react'\n\n\nconst Message = props => (\n    <div id=\"rw\">\n      <h1>{props.rightWrong}</h1>  \n    </div>\n);\n\nexport default Message;","import React from 'react';\nimport styles from \"./Container.module.css\"\n\nconst Container = props => \n    <div className={styles.container}>\n        {props.children}\n    </div>\n\n\nexport default Container;","import React, { Component } from \"react\";\nimport './App.css';\nimport Wrapper from \"./components/Wrapper/Wrapper\";\nimport images from \"./data/images.json\";\nimport Header from \"./components/Header/Header\";\nimport Directions from \"./components/Directions/Directions\";\nimport ImageCard from \"./components/Images/ImageCard\";\nimport Message from \"./components/Message/Message\"\nimport Container from \"./components/Container/Container\"\n\n\nfunction shuffleImages(array) {\n  for (let i = array.length -1; i >0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]]\n  }\n  return array\n}\n\nclass App extends Component {\n  state = {\n    images,\n    curScore: 0,\n    topScore: 0,\n    rightWrong: \"\",\n    clicked: []\n  }\n\n  //if index of photo clicked within clicked array is undefined, execute handleIncrement and set state of clicked array to add the id of the photo to any data already existing in the array\n  //if index of photo clicked is defined within the clicked array, execute handleReset\n  handleClick = id => {\n    if (this.state.clicked.indexOf(id) === -1) {\n      this.handleIncrement()\n      this.setState({ clicked: this.state.clicked.concat(id) })\n    }\n    else {\n      this.handleReset()\n    }\n  }\n\n  handleIncrement = () => {\n    const newScore = this.state.curScore + 1\n    //set the state of the current score so that it is equal to newScore\n    this.setState({\n      curScore: newScore,\n      rightWrong: \"\"\n    })\n    //if the new score is greater than or equal to the top score, set the state of the top score so that it is equal to the new score\n    if (newScore >= this.state.topScore) {\n      this.setState({ topScore: newScore })\n    }\n    //if the new score is equal to 12, set the state of rightWrong to \"You win\", and then execute handleSuffle\n    else if (newScore === 12) {\n      this.setState({  rightWrong: \"You win!\" })\n    }\n    this.handleShuffle()\n  }\n\n  //set state of everything back to original state to restart game, except to hold on to the top score and show the rightWrong message\n  handleReset = () => {\n    this.setState({\n      curScore: 0,\n      topScore: this.state.topScore,\n      rightWrong: \"You lost! Click any image to restart!\",\n      clicked: []\n    })\n  }\n\n  handleShuffle = () => {\n    let shuffledImages = shuffleImages(images)\n    this.setState({ images: shuffledImages})\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <Header score={this.state.curScore} topScore={this.state.topScore} />\n        <Directions />\n        <Message rightWrong={this.state.rightWrong} />\n        <Container>\n          {this.state.images.map(image => (\n            <div className=\"card-container\">\n              <ImageCard key={image.id} handleClick={this.handleClick} handleIncrement={this.handleIncrement} handleReset={this.handleReset} handleShuffle={this.handleShuffle} id={image.id} image={image.image}\n              />\n            </div>\n          ))}\n        </Container>\n        \n      </Wrapper>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}